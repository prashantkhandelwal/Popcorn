# Note that not all the queries will work properly.
# Some of the queries were built with different approach and later on removed when there was a performance hit.
# All queries are stored here for reference purpose.



# Get all movies by director

query ($name: String!) {
  moviesByDirector(directorname: $name) {
    id
    movies {
      title
    }
  }
}

vars;
{
  "name": "steven spielberg"
}

###########################################

# With paging in place, the query to get movies 
# by director name wil change to the following query
# Here passing ID is very important, as the Movie schema
# is stiched at runtime on the basis of the id. 
# In this case this id is TMDB ID.

query ($name: String!) {
  moviesByDirector (directorname: $name ){
    nodes{
      id
      movies {
        title
      }
    }
  }
}

vars;
{
  "name": "steven spielberg"
}

###########################################

# Get Movies by name - Approach 1

query ($name: String!) {
  movies (moviename: $name ){
    id
    originaltitle
    title
    overview
    credits{
      cast{
        name
      }
    }
  }
}

vars;
{
  "name": "iron"
}

###########################################

# Get Movies by name - Approach 2

query GetMovies($name: String!) {
  movies(where: { title: { eq: $name } }) {
    id
    title
    overview
    originallanguage
    productioncompanies {
      name
      origincountry
    }
    credits {
      cast {
        name
        character
      }
      crew {
        name
        job
      }
    }
  }
}


vars;
{
  "name": "Iron Man"
}

###########################################

Get Movies by Genre

query {
  moviesByGenre(where: { genres: { some: { name: { eq: "Crime" } } } }) {
    id
    title
  }
}

############################################

Get Movies by Genres passed as params

query ($name: [String!]!) {
moviesByGenre(genrename: $name) {
  id
    title
  }
}


{
  "name": ["Crime", "Adventure"]
}

######################################################

Get movies by multiple genres - Query will time-out as there are lot of records

query {
  searchMovies (
    where: {
      and: [
        { genres: { some: { name: { eq: "Science Fiction" } } } }
        { genres: { some: { name: { eq: "Adventure" } } } }
      ]
    }
  ) {
    id
    originaltitle
    title
    overview
    credits{
      cast{
        character
        name
      }
    }
  }
}

#######################################################

Search movies on the basis of Genre in the order of popularity

query {
  searchMovies (
    where: {
      and: [
        { genres: { some: { name: { eq: "Science Fiction" } } } },
        { genres: { some: { name: { eq: "Adventure" } } } },
      ]
    }, order: {popularity:DESC}
  ) {
    id
    originaltitle
    title
    overview
    popularity
  }
}

########################################################

Return top 10 movies on the basis of Genre order by popularity

query {
  searchMovies(first: 10 where: {
      and: [
        { genres: { some: { name: { eq: "Science Fiction" } } } },
        { genres: { some: { name: { eq: "Adventure" } } } },
      ]
    }, order: {popularity:DESC}) {
    edges {
      node {
        id
        title
        overview
        releasedate
        popularity
      }
    }
  }
}

########################################################

Return top 10 movies on the basis of Genre order by popularity.
The query uses cursor for paging purpose. Client can read the 
response from the pageInfo object and perform the paging.

No server-side configuration was needed in this case.


query {
  searchMovies(first: 10 where: {
      and: [
        { genres: { some: { name: { eq: "Science Fiction" } } } },
        { genres: { some: { name: { eq: "Adventure" } } } },
      ]
    }, order: {popularity:DESC}) {
    edges {
      node {
        id
        title
        overview
        releasedate
        popularity
      }
      cursor
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

########################################################

# Query to accept movie id in integer or string format.
# Though you can make use of the search movie function 
# and apply the filter on either TMDBId or on IMDBId field.
# This function also demonstrates the usage of AnyType in GraphQL

query GetMoviesById ($id: Any!) {
  movieById (movieid: $id ) {
    id
    title
  }
}


vars:
{
  "id": 857
}

# or string type
{
  "id": "tt0240464"
}

########################################################